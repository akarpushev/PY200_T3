### Реализация инкапсуляции в Python
# В Python нет 100% возможности закрыть доступ к атрибутам и методам извне,
# хотя существует способ ее имитировать.
#
# Пользователю вашего кода необходимо объяснить,
# что нельзя напрямую обращаться с некоторым атрибутам и методам вашего класса.
#
# Делается это приставкой одного нижнего подчеркивания или
# двух нижних подчеркиваний перед названием атрибута или метода.
#
# Атрибуты и методы (не важно экземпляра, класса, статические) называются:
# - **публичными (public)**, если в начале нет подчеркиваний
# - **защищённые (protected)**, если в начале стоит одно подчеркивание.
#     В Python их называют атрибутами API класса.
# - **приватные (private)**, если в начале стоит два подчеркивания.

class SomeClass:
    def __init__(self):
        self.public_attr = "public_attr"
        self._protected_attr = "_protected_attr"
        self.__private_attr = "__private_attr"

# это делает пользователь
some_instance = SomeClass()
print(some_instance.public_attr)  # все хорошо, доступ к публичным атрибутам
print(some_instance._protected_attr)  # доступ к защищенным атрибутам, можно но не стоит
print(some_instance._SomeClass__private_attr)  # доступ к приватным атрибутам, всё равно можно, но тоже не стоит

class Book:
    books = list(range(10))
    _books = list(range(10, -1, -1))
    __books = {}
    def get_book_from_id(self, id: int):
        return self.books[id]

# это делает пользователь
b = Book()
print(b.get_book_from_id(9)) # через экземпляр
print(b.books)
print(b._books)
print(b._Book__books)
print(Book.books)            # через класс
print(Book._books)
print(Book._Book__books)

b._Book__books = '123'      # изменение
print(b._Book__books)

# Атрибут вида __private_attr преобразуется в _SomeClass__private_attr.
#
# Применение подчеркиваний:
#
# одно нижнее подчеркивания предназначено, чтобы показать принадлежность для «внутреннего использования».
# Например, внутри класса.
# два нижних подчеркивания позволяют указать более строгую внутреннюю принадлежность.
# И больше предназначено для наследования.
# Более детально можно почитать в PEP8